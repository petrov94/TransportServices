//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TransportLines.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    using System.Windows;

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Company", Namespace="http://schemas.datacontract.org/2004/07/Transport_Library")]
    [System.SerializableAttribute()]
    public partial class Company : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Prevozi", Namespace="http://schemas.datacontract.org/2004/07/Transport_Library")]
    [System.SerializableAttribute()]
    public partial class Prevozi : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EndPointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte FreespacesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ID_CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StartPointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeofField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EndPoint {
            get {
                return this.EndPointField;
            }
            set {
                if ((this.EndPointField.Equals(value) != true)) {
                    this.EndPointField = value;
                    this.RaisePropertyChanged("EndPoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Freespaces {
            get {
                return this.FreespacesField;
            }
            set {
                if ((this.FreespacesField.Equals(value) != true)) {
                    this.FreespacesField = value;
                    this.RaisePropertyChanged("Freespaces");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID_Company {
            get {
                return this.ID_CompanyField;
            }
            set {
                if ((this.ID_CompanyField.Equals(value) != true)) {
                    this.ID_CompanyField = value;
                    this.RaisePropertyChanged("ID_Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartPoint {
            get {
                return this.StartPointField;
            }
            set {
                if ((this.StartPointField.Equals(value) != true)) {
                    this.StartPointField = value;
                    this.RaisePropertyChanged("StartPoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timeof {
            get {
                return this.TimeofField;
            }
            set {
                if ((this.TimeofField.Equals(value) != true)) {
                    this.TimeofField = value;
                    this.RaisePropertyChanged("Timeof");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITransportServ")]
    public interface ITransportServ {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/FindCompanybyName", ReplyAction="http://tempuri.org/ITransportServ/FindCompanybyNameResponse")]
        TransportLines.ServiceReference1.Company FindCompanybyName(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/FindCompanybyName", ReplyAction="http://tempuri.org/ITransportServ/FindCompanybyNameResponse")]
        System.Threading.Tasks.Task<TransportLines.ServiceReference1.Company> FindCompanybyNameAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/FindCompanybyID", ReplyAction="http://tempuri.org/ITransportServ/FindCompanybyIDResponse")]
        TransportLines.ServiceReference1.Company FindCompanybyID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/FindCompanybyID", ReplyAction="http://tempuri.org/ITransportServ/FindCompanybyIDResponse")]
        System.Threading.Tasks.Task<TransportLines.ServiceReference1.Company> FindCompanybyIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/AllCities", ReplyAction="http://tempuri.org/ITransportServ/AllCitiesResponse")]
        string[] AllCities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/AllCities", ReplyAction="http://tempuri.org/ITransportServ/AllCitiesResponse")]
        System.Threading.Tasks.Task<string[]> AllCitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/GetAllLinesFromCompany", ReplyAction="http://tempuri.org/ITransportServ/GetAllLinesFromCompanyResponse")]
        TransportLines.ServiceReference1.Prevozi[] GetAllLinesFromCompany(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/GetAllLinesFromCompany", ReplyAction="http://tempuri.org/ITransportServ/GetAllLinesFromCompanyResponse")]
        System.Threading.Tasks.Task<TransportLines.ServiceReference1.Prevozi[]> GetAllLinesFromCompanyAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/Citybyid", ReplyAction="http://tempuri.org/ITransportServ/CitybyidResponse")]
        string Citybyid(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/Citybyid", ReplyAction="http://tempuri.org/ITransportServ/CitybyidResponse")]
        System.Threading.Tasks.Task<string> CitybyidAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/CitybyName", ReplyAction="http://tempuri.org/ITransportServ/CitybyNameResponse")]
        int CitybyName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/CitybyName", ReplyAction="http://tempuri.org/ITransportServ/CitybyNameResponse")]
        System.Threading.Tasks.Task<int> CitybyNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/Login", ReplyAction="http://tempuri.org/ITransportServ/LoginResponse")]
        bool Login(string Name, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/Login", ReplyAction="http://tempuri.org/ITransportServ/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string Name, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/GetAllLines", ReplyAction="http://tempuri.org/ITransportServ/GetAllLinesResponse")]
        TransportLines.ServiceReference1.Prevozi[] GetAllLines();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/GetAllLines", ReplyAction="http://tempuri.org/ITransportServ/GetAllLinesResponse")]
        System.Threading.Tasks.Task<TransportLines.ServiceReference1.Prevozi[]> GetAllLinesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/GetAllLinesFromTo", ReplyAction="http://tempuri.org/ITransportServ/GetAllLinesFromToResponse")]
        TransportLines.ServiceReference1.Prevozi[] GetAllLinesFromTo(string StartPoint, string EndPoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/GetAllLinesFromTo", ReplyAction="http://tempuri.org/ITransportServ/GetAllLinesFromToResponse")]
        System.Threading.Tasks.Task<TransportLines.ServiceReference1.Prevozi[]> GetAllLinesFromToAsync(string StartPoint, string EndPoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/AddnewCompany", ReplyAction="http://tempuri.org/ITransportServ/AddnewCompanyResponse")]
        void AddnewCompany(TransportLines.ServiceReference1.Company prevoz);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/AddnewCompany", ReplyAction="http://tempuri.org/ITransportServ/AddnewCompanyResponse")]
        System.Threading.Tasks.Task AddnewCompanyAsync(TransportLines.ServiceReference1.Company prevoz);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/AddnewLine", ReplyAction="http://tempuri.org/ITransportServ/AddnewLineResponse")]
        void AddnewLine(TransportLines.ServiceReference1.Prevozi line);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/AddnewLine", ReplyAction="http://tempuri.org/ITransportServ/AddnewLineResponse")]
        System.Threading.Tasks.Task AddnewLineAsync(TransportLines.ServiceReference1.Prevozi line);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/UpdateCompanybyName", ReplyAction="http://tempuri.org/ITransportServ/UpdateCompanybyNameResponse")]
        void UpdateCompanybyName(string name, string password, string telefone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransportServ/UpdateCompanybyName", ReplyAction="http://tempuri.org/ITransportServ/UpdateCompanybyNameResponse")]
        System.Threading.Tasks.Task UpdateCompanybyNameAsync(string name, string password, string telefone);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransportServChannel : TransportLines.ServiceReference1.ITransportServ, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransportServClient : System.ServiceModel.ClientBase<TransportLines.ServiceReference1.ITransportServ>, TransportLines.ServiceReference1.ITransportServ {
        
        public TransportServClient() {
        }
        
        public TransportServClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TransportServClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransportServClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransportServClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TransportLines.ServiceReference1.Company FindCompanybyName(string Name) {
            return base.Channel.FindCompanybyName(Name);
        }
        
        public System.Threading.Tasks.Task<TransportLines.ServiceReference1.Company> FindCompanybyNameAsync(string Name) {
            return base.Channel.FindCompanybyNameAsync(Name);
        }
        
        public TransportLines.ServiceReference1.Company FindCompanybyID(int ID) {
            return base.Channel.FindCompanybyID(ID);
        }
        
        public System.Threading.Tasks.Task<TransportLines.ServiceReference1.Company> FindCompanybyIDAsync(int ID) {
            return base.Channel.FindCompanybyIDAsync(ID);
        }
        
        public string[] AllCities() {
            return base.Channel.AllCities();
        }
        
        public System.Threading.Tasks.Task<string[]> AllCitiesAsync() {
            return base.Channel.AllCitiesAsync();
        }
        
        public TransportLines.ServiceReference1.Prevozi[] GetAllLinesFromCompany(int ID) {
            return base.Channel.GetAllLinesFromCompany(ID);
        }
        
        public System.Threading.Tasks.Task<TransportLines.ServiceReference1.Prevozi[]> GetAllLinesFromCompanyAsync(int ID) {
            return base.Channel.GetAllLinesFromCompanyAsync(ID);
        }
        
        public string Citybyid(int id) {
            return base.Channel.Citybyid(id);
        }
        
        public System.Threading.Tasks.Task<string> CitybyidAsync(int id) {
            return base.Channel.CitybyidAsync(id);
        }
        
        public int CitybyName(string name) {
            return base.Channel.CitybyName(name);
        }
        
        public System.Threading.Tasks.Task<int> CitybyNameAsync(string name) {
            return base.Channel.CitybyNameAsync(name);
        }
        
        public bool Login(string Name, string Password) {
            try {
                return base.Channel.Login(Name, Password);
            }catch(Exception e)
            {
                return false;
            }
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string Name, string Password) {
            return base.Channel.LoginAsync(Name, Password);
        }
        
        public TransportLines.ServiceReference1.Prevozi[] GetAllLines() {
            return base.Channel.GetAllLines();
        }
        
        public System.Threading.Tasks.Task<TransportLines.ServiceReference1.Prevozi[]> GetAllLinesAsync() {
            return base.Channel.GetAllLinesAsync();
        }
        
        public TransportLines.ServiceReference1.Prevozi[] GetAllLinesFromTo(string StartPoint, string EndPoint) {
            return base.Channel.GetAllLinesFromTo(StartPoint, EndPoint);
        }
        
        public System.Threading.Tasks.Task<TransportLines.ServiceReference1.Prevozi[]> GetAllLinesFromToAsync(string StartPoint, string EndPoint) {
            return base.Channel.GetAllLinesFromToAsync(StartPoint, EndPoint);
        }
        
        public void AddnewCompany(TransportLines.ServiceReference1.Company prevoz) {
            base.Channel.AddnewCompany(prevoz);
        }
        
        public System.Threading.Tasks.Task AddnewCompanyAsync(TransportLines.ServiceReference1.Company prevoz) {
            return base.Channel.AddnewCompanyAsync(prevoz);
        }
        
        public void AddnewLine(TransportLines.ServiceReference1.Prevozi line) {
            base.Channel.AddnewLine(line);
        }
        
        public System.Threading.Tasks.Task AddnewLineAsync(TransportLines.ServiceReference1.Prevozi line) {
            return base.Channel.AddnewLineAsync(line);
        }
        
        public void UpdateCompanybyName(string name, string password, string telefone) {
            base.Channel.UpdateCompanybyName(name, password, telefone);
        }
        
        public System.Threading.Tasks.Task UpdateCompanybyNameAsync(string name, string password, string telefone) {
            return base.Channel.UpdateCompanybyNameAsync(name, password, telefone);
        }
    }
}
